<%#encoding:UTF-8%><!DOCTYPE html>
<html lang="<%= attr :lang, 'en' %>">
<head>
    <meta charset="<%= attr :encoding %>">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="generator" content="Asciidoctor <%= attr 'asciidoctor-version' %>">
    <title><%= doctitle %></title>
    <% if Asciidoctor::DEFAULT_STYLESHEET_KEYS.include?(attr :stylesheet) %>
    <link rel="stylesheet" href="<%= normalize_web_path(Asciidoctor::DEFAULT_STYLESHEET_NAME, (attr :stylesdir, '')) %>">
    <% elsif attr? :stylesheet %>
    <link rel="stylesheet" href="<%= normalize_web_path((attr :stylesheet), (attr :stylesdir, '')) %>">
    <% end %>
    <% if attr? :icons, 'font' %>
    <link rel="stylesheet" href="<%= normalize_web_path(Asciidoctor::DEFAULT_FONTAWESOME_STYLESHEET_NAME, (attr :stylesdir, '')) %>">
    <% end %>
    <style>
        #search-container {
            position: fixed;
            top: 0;
            right: 0;
            padding: 20px;
            background: white;
            border-left: 1px solid #ddd;
            border-bottom: 1px solid #ddd;
            z-index: 1000;
        }
        #search-input {
            width: 200px;
            padding: 5px;
        }
        #search-results {
            margin-top: 10px;
            max-height: 400px;
            overflow-y: auto;
        }
        .search-result {
            margin: 10px 0;
            padding: 10px;
            border: 1px solid #ddd;
            background: white;
        }
    </style>
</head>
<body class="<%= [(attr :doctype),*((attr :role)&.split(' '))]* ' ' %>"<%= (attr? :max-width) ? %( style="max-width: #{attr 'max-width'};") : nil %>>
    <div id="search-container">
        <input type="text" id="search-input" placeholder="Suchen...">
        <div id="search-results"></div>
    </div>

    <%= content %>

    <script src="https://unpkg.com/lunr/lunr.js"></script>
    <script>
        let idx;
        let documents = {};

        fetch('search-index.json')
            .then(response => response.json())
            .then(data => {
                documents = data;
                idx = lunr(function() {
                    this.ref('id');
                    this.field('title');
                    this.field('content');

                    Object.entries(data).forEach(([id, doc]) => {
                        this.add({
                            id: id,
                            title: doc.title,
                            content: doc.content
                        });
                    });
                });
            });

        document.getElementById('search-input').addEventListener('input', function(e) {
            const query = e.target.value;
            const results = document.getElementById('search-results');
            
            if (query.length < 2) {
                results.innerHTML = '';
                return;
            }

            try {
                const searchResults = idx.search(query);
                results.innerHTML = searchResults
                    .map(result => {
                        const doc = documents[result.ref];
                        return `
                            <div class="search-result">
                                <h3><a href="${doc.url}">${doc.title}</a></h3>
                                <p>${doc.preview}</p>
                            </div>
                        `;
                    })
                    .join('');
            } catch (e) {
                results.innerHTML = 'Keine Ergebnisse gefunden';
            }
        });
    </script>
</body>
</html> 